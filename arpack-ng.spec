#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : arpack-ng
Version  : 3.7.0
Release  : 2
URL      : https://github.com/opencollab/arpack-ng/archive/3.7.0.tar.gz
Source0  : https://github.com/opencollab/arpack-ng/archive/3.7.0.tar.gz
Summary  : Collection of Fortran77 subroutines designed to solve large scale eigenvalue problems
Group    : Development/Tools
License  : BSD-3-Clause
Requires: arpack-ng-lib = %{version}-%{release}
Requires: arpack-ng-license = %{version}-%{release}
BuildRequires : cmake
BuildRequires : git
BuildRequires : openblas
BuildRequires : openmpi-dev
BuildRequires : pkg-config
BuildRequires : pkgconfig(eigen3)

%description
1. Purpose
-------
This directory contains example drivers that call ARPACK subroutines
__aupd.f and __eupd.f to solve various eigenvalue problems using regular,
shift-invert or other special modes (such as Cayley, Bucking etc.)
These drivers illustrate how to set various ARPACK parameters to solve
different problems in different modes.  They provide a guideline on how
to use ARPACK's reverse communication interface.  The user may modify
any one of these drivers, and supply his/her own matrix vector
multiplication routine to solve the problem of his/her own interest.
These drivers are installed in the following subdirectories.

%package dev
Summary: dev components for the arpack-ng package.
Group: Development
Requires: arpack-ng-lib = %{version}-%{release}
Provides: arpack-ng-devel = %{version}-%{release}
Requires: arpack-ng = %{version}-%{release}
Requires: arpack-ng = %{version}-%{release}

%description dev
dev components for the arpack-ng package.


%package lib
Summary: lib components for the arpack-ng package.
Group: Libraries
Requires: arpack-ng-license = %{version}-%{release}

%description lib
lib components for the arpack-ng package.


%package license
Summary: license components for the arpack-ng package.
Group: Default

%description license
license components for the arpack-ng package.


%prep
%setup -q -n arpack-ng-3.7.0

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C
export SOURCE_DATE_EPOCH=1560524675
mkdir -p clr-build
pushd clr-build
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math "
export FCFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math "
export FFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math "
export CXXFLAGS="$CXXFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math "
%cmake ..
make  %{?_smp_mflags}
popd
mkdir -p clr-build-avx2
pushd clr-build-avx2
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=haswell "
export FCFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=haswell "
export FFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=haswell "
export CXXFLAGS="$CXXFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=haswell "
export CFLAGS="$CFLAGS -march=haswell -m64"
export CXXFLAGS="$CXXFLAGS -march=haswell -m64"
%cmake ..
make  %{?_smp_mflags}
popd
mkdir -p clr-build-avx512
pushd clr-build-avx512
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=skylake-avx512 "
export FCFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=skylake-avx512 "
export FFLAGS="$CFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=skylake-avx512 "
export CXXFLAGS="$CXXFLAGS -O3 -falign-functions=32 -ffat-lto-objects -flto=4 -fno-math-errno -fno-semantic-interposition -fno-trapping-math -march=skylake-avx512 "
export CFLAGS="$CFLAGS -march=skylake-avx512 -m64 "
export CXXFLAGS="$CXXFLAGS -march=skylake-avx512 -m64 "
%cmake ..
make  %{?_smp_mflags}
popd

%check
export LANG=C
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
cd clr-build; make test
cd ../clr-build-avx2;
make test || :
cd ../clr-build-avx512;
make test || :

%install
export SOURCE_DATE_EPOCH=1560524675
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/arpack-ng
cp COPYING %{buildroot}/usr/share/package-licenses/arpack-ng/COPYING
pushd clr-build-avx512
%make_install_avx512  || :
popd
pushd clr-build-avx2
%make_install_avx2  || :
popd
pushd clr-build
%make_install
popd

%files
%defattr(-,root,root,-)

%files dev
%defattr(-,root,root,-)
/usr/include/arpack/arpackdef.h
/usr/include/arpack/debug.h
/usr/include/arpack/stat.h
/usr/lib/cmake/arpack-ng-config-version.cmake
/usr/lib/cmake/arpack-ng-config.cmake
/usr/lib64/haswell/avx512_1/libarpack.so
/usr/lib64/haswell/libarpack.so
/usr/lib64/libarpack.so

%files lib
%defattr(-,root,root,-)
/usr/lib64/haswell/avx512_1/libarpack.so.2
/usr/lib64/haswell/avx512_1/libarpack.so.2.1.0
/usr/lib64/haswell/libarpack.so.2
/usr/lib64/haswell/libarpack.so.2.1.0
/usr/lib64/libarpack.so.2
/usr/lib64/libarpack.so.2.1.0

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/arpack-ng/COPYING
